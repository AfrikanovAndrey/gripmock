// Code generated by GripMock. DO NOT EDIT.
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net"
	"net/http"

	"github.com/mitchellh/mapstructure"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

const (
	TCP_ADDRESS = ""
	HTTP_PORT   = ":"
)

type Gripmock struct{}

func (s *Gripmock) SayHello(ctx context.Context, in *Request) (*Reply, error) {
	out := &Reply{}
	err := findStub("Gripmock", "SayHello", in, out)
	return out, err
}

func (s *Gripmock) ServerStream(in *Request, stream Gripmock_ServerStreamServer) error {
	out := &Reply{}
	err := findStub("Gripmock", "ServerStream", in, out)
	if err != nil {
		return err
	}

	return stream.Send(out)
}

func (s *Gripmock) ClientStream(stream Gripmock_ClientStreamServer) error {
	out := &Reply{}
	for {
		input, err := stream.Recv()
		if err == io.EOF {
			return stream.SendAndClose(out)
		}
		err = findStub("Gripmock", "ClientStream", input, out)
		if err != nil {
			return err
		}
	}
}

func (s *Gripmock) Bidirectional(stream Gripmock_BidirectionalServer) error {
	for {
		in, err := stream.Recv()
		if err == io.EOF {
			return nil
		}
		if err != nil {
			return err
		}

		out := &Reply{}
		err = findStub("Gripmock", "Bidirectional", in, out)
		if err != nil {
			return err
		}

		if err := stream.Send(out); err != nil {
			return err
		}
	}
}

func main() {
	lis, err := net.Listen("tcp", TCP_ADDRESS)
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}

	s := grpc.NewServer()

	RegisterGripmockServer(s, &Gripmock{})

	reflection.Register(s)
	fmt.Println("Serving gRPC on tcp://" + TCP_ADDRESS)
	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}

type payload struct {
	Service string      `json:"service"`
	Method  string      `json:"method"`
	Data    interface{} `json:"data"`
}

type response struct {
	Data  interface{} `json:"data"`
	Error string      `json:"error"`
}

func findStub(service, method string, in, out interface{}) error {
	url := fmt.Sprintf("http://localhost%s/find", HTTP_PORT)
	pyl := payload{
		Service: service,
		Method:  method,
		Data:    in,
	}
	byt, err := json.Marshal(pyl)
	if err != nil {
		return err
	}
	reader := bytes.NewReader(byt)
	resp, err := http.DefaultClient.Post(url, "application/json", reader)
	if err != nil {
		return fmt.Errorf("Error request to stub server %v", err)
	}

	if resp.StatusCode != http.StatusOK {
		body, _ := ioutil.ReadAll(resp.Body)
		return fmt.Errorf(string(body))
	}

	respRPC := new(response)
	err = json.NewDecoder(resp.Body).Decode(respRPC)
	if err != nil {
		return fmt.Errorf("decoding json response %v", err)
	}

	if respRPC.Error != "" {
		return fmt.Errorf(respRPC.Error)
	}

	return mapstructure.Decode(respRPC.Data, out)
}

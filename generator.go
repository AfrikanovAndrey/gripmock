package main

import (
	"io"
	"os"
	"strings"
	"text/template"
)

type generatorParam struct {
	Protos    []Proto
	GrpcAddr  string
	AdminPort string
	PbPath    string
}

type Options struct {
	writer    io.Writer
	grpcAddr  string
	adminPort string
	pbPath    string
}

func GenerateServerFromProto(proto []Proto, opt *Options) error {
	param := generatorParam{
		Protos:    filterProto(proto),
		GrpcAddr:  opt.grpcAddr,
		AdminPort: opt.adminPort,
		PbPath:    opt.pbPath,
	}

	if opt == nil {
		opt = &Options{}
	}

	if opt.writer == nil {
		opt.writer = os.Stdout
	}

	tmpl := template.New("server.tmpl").Funcs(template.FuncMap{
		"Title": strings.Title,
	})
	tmpl, err := tmpl.Parse(SERVER_TEMPLATE)
	if err != nil {
		return err
	}

	return tmpl.Execute(opt.writer, param)
}

func filterProto(protos []Proto) []Proto {
	newProto := []Proto{}
	for _, proto := range protos {
		if len(proto.Services) == 0 {
			continue
		}
		newProto = append(newProto, proto)
	}

	return newProto
}

const SERVER_TEMPLATE = `// DO NOT EDIT. This file is autogenerated by GripMock
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net"
	"net/http"

	"github.com/mitchellh/mapstructure"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

const (
	TCP_ADDRESS  = "{{.GrpcAddr}}"
	HTTP_PORT = ":{{.AdminPort}}"
)

{{ range .Protos }}
{{ template "services" .Services }}
{{ end }}

func main() {
	lis, err := net.Listen("tcp", TCP_ADDRESS)
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}

	s := grpc.NewServer()
	{{ range .Protos }}
	{{ template "register_services" .Services }}
	{{ end }}

	reflection.Register(s)
	fmt.Println("Serving gRPC on tcp://" + TCP_ADDRESS)
	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}

{{ template "find_stub" }}

{{ define "services" }}
{{range . }}
type {{.Name}} struct{}

{{ template "methods" .}}

{{end}}
{{ end }}

{{ define "methods" }}
{{ $serviceName := .Name }}
{{ range .Methods}}
{{ $methodName := .Name | Title }}
func (s *{{$serviceName}}) {{$methodName}}(ctx context.Context, in *{{.Input}}) (*{{.Output}},error){
	out := &{{.Output}}{}
	err := findStub("{{$serviceName}}", "{{$methodName}}", in, out)
	return out, err
}
{{end}}
{{end}}

{{ define "register_services" }}
{{ range .}}
	Register{{.Name}}Server(s, &{{.Name}}{})
{{ end }}
{{ end }}

{{ define "find_stub" }}
type payload struct {
	Service string      ` + "`json:\"service\"`" + `
	Method  string      ` + "`json:\"method\"`" + `
	Data    interface{} ` + "`json:\"data\"`" + `
}

type response struct {
	Data  interface{} ` + "`json:\"data\"`" + `
	Error string      ` + "`json:\"error\"`" + `
}

func findStub(service, method string, in, out interface{}) error {
	url := fmt.Sprintf("http://localhost%s/find", HTTP_PORT)
	pyl := payload{
		Service: service,
		Method:  method,
		Data:    in,
	}
	byt, err := json.Marshal(pyl)
	if err != nil {
		return err
	}
	reader := bytes.NewReader(byt)
	resp, err := http.DefaultClient.Post(url, "application/json", reader)
	if err != nil {
		return err
	}

	if resp.StatusCode != http.StatusOK {
		body, _ := ioutil.ReadAll(resp.Body)
		return fmt.Errorf(string(body))
	}

	respRPC := new(response)
	err = json.NewDecoder(resp.Body).Decode(respRPC)
	if err != nil {
		return err
	}

	if respRPC.Error != "" {
		return fmt.Errorf(respRPC.Error)
	}

	return mapstructure.Decode(respRPC.Data, out)
}
{{ end }}`
